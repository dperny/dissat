#
# Basic organizational structures of the language
# 
       program : expressionList EOF

expressionList : *none*
               | expression SEMI expressionList

         block : DO expressionList END

  # expressions always return a value

    expression : variable ASSIGN expression
               | variable operator expression
               | variable
               | literal operator expression
               | literal
               | funcCall
               | functDef
               | tableDef
               | if
               | while

#
# Atoms - variables, values, and literals
#
      variable : NAME optTableIndex

       literal : NUMBER
               | STRING

      operator : PLUS
               | MINUS
               | TIMES
               | DIVIDE
               | MODULUS
               | LESSTHAN
               | GREATERTHAN
               | LESSTHANOREQ
               | GREATERTHANOREQ
               | EEQ

#
# Table stuff. Tables are associative arrays, more or less
# 
      tableDef : OBRAK fieldsList CBRAK

    fieldsList : expression COLON expression COMMA fieldList
               | expression COLON expression

 optTableIndex : *none*
               | tableIndex

    tableIndex : OSQBRAK expression CSQBRAK optTableIndex


#
# functions and function accessories
#

       funcDef : FUNCTION OPAREN paramList CPAREN block

     paramList : *none*
               | NAME
               | NAME COMMA paramList

      funcCall : variable OPAREN argList CPAREN

       argList : *none*
               | expression
               | expression COMMA argList

#
# Conditionals, looping
#
      # if must have an else because as an expression, it returns a value,
      # and if it had no ELSE it wouldn't reliably return a value

            if : IF expression THEN expressionList else

          else : ELSE expressionlist END
               | ELSE if

         while : WHILE expression block
